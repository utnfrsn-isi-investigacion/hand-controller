name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run tests
      run: |
        python -m unittest discover -s tests -p "test_*.py" -v

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env
      with:
        install-requirements: 'false'
        extra-dependencies: 'flake8 pylint'

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=__pycache__,_esp32
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=__pycache__,_esp32

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env
      with:
        extra-dependencies: 'safety bandit'

    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json --exclude=./_esp32,./tests || true
        bandit -r . --exclude=./_esp32,./tests

    - name: Check dependencies with safety
      run: |
        safety check --json || true
        safety check

  build-status:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.test.result }}" = "failure" ] || [ "${{ needs.lint.result }}" = "failure" ]; then
          echo "Build failed!"
          exit 1
        else
          echo "Build passed!"
        fi
